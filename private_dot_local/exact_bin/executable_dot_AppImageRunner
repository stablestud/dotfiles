#! /usr/bin/env sh
#
# Wrapper script that tries to run the AppImages in ~/.local/bin/.AppImages/*
# while making sure that systems without the fuse v2 dependency can run
# without problems.
# The script must be executed via an symlink to it. The name of the symlink
# specifies the AppImage to run.
# For example: ./vim -> ./.AppImageRunner
# This would execute the AppImage vim.AppImage from ~/.local/bin/.AppImages
#
# AppImage requires exactly fuse v2, not newer version like fuse v3 (like Gentoo).
# If fuse v2 is not available, use a workaround by extracting the AppImage
# into a temporary directory and execute it. This is being done by AppImage
# with the `--appimage-extract` parameter.
#
# Note: AppImage still requires a correct glibc version, the glibc version
# witch AppImage was compiled with must be same or older than the current
# version, as newer glibc versions are back compatible.
#
# For now the required glibc version is glibc 2.29, this is because most
# AppImages are built on Ubuntu 20.04 LTS which ships with glibc 2.29
#
# To find the currently installed glibc version
# $(ldconfig --print-cache | grep --max-count 1 libc.so.6 | awk -F " " '{print $NF}')
# Note: the library must be executable

appimage="$(basename "${0}")"
basepath="$(cd "$(dirname "${0}")" && pwd)"

if [ "${appimage}" = ".AppImageRunner" ] && [ -n "${1}" ]; then
	appimage="${1}"
	shift
elif [ "${appimage}" = ".AppImageRunner" ] || [ -z "${appimage}" ]; then
	echo "Error: no AppImage specified to run" 1>&2
	exit 1
fi

appimagepath="${basepath}/.AppImages/${appimage}.AppImage"

if ! [ -x "${appimagepath}" ]; then
	echo "Error: cannot find ${appimagepath} or not executable"
	exit 1
fi

# Check if system is fuse capable, if yes run AppImage the normal way (with fuse)
if command -v ldconfig 1>/dev/null 2>&1; then
	libs="$(ldconfig --print-cache | grep '^[[:space:]]\+libfuse\.so\.2[[:space:]]')"
	if [ -n "${libs}" ]; then
		exec "${appimagepath}" "${@}"
	fi
fi

# Since we landed here, fuse is not working/not installed so we do a workaround
# by extracting the AppImage and run it from the extracted directory.
# If the directory already exist, don't extract and run the AppImage directly.
#
# We extract to /tmp/$USER.$appimage, seperating the instances between users,
# allowing mutiple users to run the AppImage in parallel, as extracting it into
# a commonly used directory cross users could cause issues with access/write rights
# and also could introduce security issues, for example:
# user could modify the extracted binary which another would then run.
# Instead isolate the AppImage between users.
#
# Note: previously `--appimage-extract-and-run` was used with NO_CLEANUP=1,
# but it printed `File exists and file size matches, skipping`
# which spammed the ouput which was annoying, also it was not possible to
# share the AppImage across users, as the extracted directory would be owned
# by the first user who executed the AppImage.
#
# Instead do it manually which also allows user isolation.
appimagepath_extracted_base="/tmp/${USER:-$(whoami)}.AppImages/${appimage}.AppImage"
appimagepath_extracted="${appimagepath_extracted_base}/squashfs-root/AppRun"

if ! [ -x "${appimagepath_extracted}" ]; then
	(umask 0077 &&
		mkdir --parent "${appimagepath_extracted_base}" &&
		cd "${appimagepath_extracted_base}" &&
		exec "${appimagepath}" --appimage-extract 1>/dev/null) ||
	{ echo "Error: failed to extract ${appimagepath}"; exit 1; }
fi

exec "${appimagepath_extracted}" "${@}"
